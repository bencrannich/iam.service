#! /bin/sh

# This script is used to bootstrap a Vault instance (VAULT_ADDR should be set
# in the environment), or unseal one if we previously bootstrapped it but
# it's sealed (e.g., been rebooted).
#
# This all happens in the extremely sophisticated fashion of storing a copy
# of $(vault operator init) in /secrets/kms.txt, which should be a persistent
# volume of some sort
#
# Obviously this is not how you should do things in production, ever.

while true ; do
	vault status >/dev/null 2>&1
	status=$?
	if [ $status -eq 0 ] ; then
		# Vault is unsealed, nothing to do
		exit 0
	fi
	if [ $status -eq 2 ] ; then
		# Vault is sealed, unseal below
		break
	fi
	# unable to determine status (or status is unrecognised)
	sleep 1
done

set -e

init=no
if ! [ -r /secrets/kms.txt ] ; then
	init=yes
	vault operator init > /secrets/kms.txt
fi

KMS_UNSEAL_KEY_1=$( grep -E '^Unseal Key 1:' /secrets/kms.txt | cut -c15- )
KMS_UNSEAL_KEY_2=$( grep -E '^Unseal Key 2:' /secrets/kms.txt | cut -c15- )
KMS_UNSEAL_KEY_3=$( grep -E '^Unseal Key 3:' /secrets/kms.txt | cut -c15- )
KMS_ROOT_TOKEN=$( grep -E '^Initial Root Token: ' /secrets/kms.txt | cut -c21- )

vault operator unseal "${KMS_UNSEAL_KEY_1}"
vault operator unseal "${KMS_UNSEAL_KEY_2}"
vault operator unseal "${KMS_UNSEAL_KEY_3}"

## Perform one-time setup of the instance

# NOTE: If you edit the below, you will need to remove dev/secrets/kms (e.g.,
# via `make fullclean`) for the changes to have any effect

if [ "${init}" = "yes" ] ; then
	printf "configuring KMS instance for the first time..." >&2
	vault login "${KMS_ROOT_TOKEN}"
	vault auth enable cert
	vault secrets enable -path=secret -version=2 kv

	# The intermediate CA can provide the certificates to the online CAs,
	# but can't read any of their keys
	vault policy write inter-ca - <<EOF
path "secret/data/+/root_ca_crt" {
	capabilities = [ "create", "update", "delete", "patch" ]
}
path "secret/data/+/intermediate_ca_crt" {
	capabilities = [ "create", "update", "delete", "patch" ]
}
path "auth/cert/certs/infra-ca" {
	capabilities = [ "create", "update", "delete", "patch" ]
	allowed_parameters = {
		"allowed_dns_sans" = [ "infra-ca" ]
		"required_extensions" = [ "oid:1.3.6.1.4.1.58118.113.1" ]
  		"certificate" = []
		"policies" = [ "infra-ca" ]
  	}
}

# Allow the Intermediate CA to create auth entries for entities authenticated
# by the Provisioning CA, once the Intermediate CA has issued the Provisioning
# CA's certificate
path "auth/cert/certs/user-ca" {
	capabilities = [ "create", "update", "delete", "patch" ]
	allowed_parameters = {
		"allowed_dns_sans" = [ "user-ca" ]
		"required_extensions" = [ "oid:1.3.6.1.4.1.58118.113.1" ]
  		"certificate" = []
		"policies" = [ "user-ca" ]
  	}
}
path "auth/cert/certs/ds" {
	capabilities = [ "create", "update", "delete", "patch" ]
	allowed_parameters = {
		"allowed_dns_sans" = [ "ds" ]
		"required_extensions" = [ "oid:1.3.6.1.4.1.58118.113.1" ]
  		"certificate" = []
		"policies" = [ "ds" ]
  	}
}
path "auth/cert/certs/kdc" {
	capabilities = [ "create", "update", "delete", "patch" ]
	allowed_parameters = {
		"allowed_dns_sans" = [ "kdc" ]
		"required_extensions" = [ "oid:1.3.6.1.4.1.58118.113.1" ]
  		"certificate" = []
		"policies" = [ "kdc" ]
  	}
}
path "auth/cert/certs/kadmin" {
	capabilities = [ "create", "update", "delete", "patch" ]
	allowed_parameters = {
		"allowed_dns_sans" = [ "kadmin" ]
		"required_extensions" = [ "oid:1.3.6.1.4.1.58118.113.1" ]
  		"certificate" = []
		"policies" = [ "kadmin" ]
  	}
}

EOF
	# The provisioning CA can only read its certificates, but can otherwise
	# perform any CRUD operations within secret/data/prov-ca
	vault policy write prov-ca - <<EOF
path "secret/data/prov-ca/*" {
	capabilities = [ "create", "read", "update", "delete", "patch" ]
}
path "secret/data/+/root_ca_crt" {
	capabilities = [ "read" ]
}
path "secret/data/+/intermediate_ca_crt" {
	capabilities = [ "read" ]
}
EOF
	# The infrastructure CA can only read its (and others') certificates,
	# but can otherwise perform any CRUD operations within
	# secret/data/infra-ca
	vault policy write infra-ca - <<EOF
path "secret/data/infra-ca/*" {
	capabilities = [ "create", "read", "update", "delete", "patch" ]
}
path "secret/data/+/root_ca_crt" {
	capabilities = [ "read" ]
}
path "secret/data/+/intermediate_ca_crt" {
	capabilities = [ "read" ]
}
EOF
	# The user CA can only read its (and others') certificates,
	# but can otherwise perform any CRUD operations within
	# secret/data/user-ca
	vault policy write user-ca - <<EOF
path "secret/data/user-ca/*" {
	capabilities = [ "create", "read", "update", "delete", "patch" ]
}
path "secret/data/+/user_ca_crt" {
	capabilities = [ "read" ]
}
path "secret/data/+/user_ca_crt" {
	capabilities = [ "read" ]
}
EOF
	# Generate tokens for the CAs bound to the above policies, and write these
	# to files which are mounted into the respective containers to allow them
	# to access the secrets in Vault
	#
	# Once the provisioning CA is healthy, other containers can use that to
	# provision and authenticate themselves and access Vault, rather having
	# static tokens passed around in environment files
	INTER_TOKEN="$(vault token create -field token -policy=inter-ca -orphan)"
	touch /secrets/inter-ca.credentials && chmod 600 /secrets/inter-ca.credentials
	cat >/secrets/inter-ca.credentials <<EOF
PROV_VAULT_ADDR='${VAULT_ADDR}'
PROV_VAULT_TOKEN='${INTER_TOKEN}'
EOF
	PROV_TOKEN="$(vault token create -field token -policy=prov-ca -orphan)"
	touch /secrets/prov-ca.credentials && chmod 600 /secrets/prov-ca.credentials
	cat >/secrets/prov-ca.credentials <<EOF
PROV_VAULT_ADDR='${VAULT_ADDR}'
PROV_VAULT_TOKEN='${PROV_TOKEN}'
EOF
	INFRA_TOKEN="$(vault token create -field token -policy=infra-ca -orphan)"
	touch /secrets/infra-ca.credentials && chmod 600 /secrets/infra-ca.credentials
	cat >/secrets/infra-ca.credentials <<EOF
PROV_VAULT_ADDR='${VAULT_ADDR}'
PROV_VAULT_TOKEN='${INFRA_TOKEN}'
EOF

	# Create a policy for the directory server
	vault policy write ds - <<EOF
path "secret/data/ds/*" {
	capabilities = [ "create", "read", "update", "delete", "patch" ]
}
EOF
	# Create a policy for the Kerberos KDC
	vault policy write kdc - <<EOF
path "secret/data/kdc/*" {
	capabilities = [ "create", "read", "update", "delete", "patch" ]
}
EOF

	# services that can use the Provisioning CA can use that to obtain a
	# Vault token
	cat /certs/roots.crt.pem | vault write auth/cert/certs/default certificate=- policies="default" required_extensions="1.3.6.1.4.1.58118.104.1:*" 
	cat /certs/roots.crt.pem | vault write auth/cert/certs/ds certificate=- policies="ds" required_sans="ds" required_extensions="1.3.6.1.4.1.58118.104.1:*" 
	cat /certs/roots.crt.pem | vault write auth/cert/certs/kdc certificate=- policies="kdc" required_sans="kdc" required_extensions="1.3.6.1.4.1.58118.104.1:*" 
	cat /certs/roots.crt.pem | vault write auth/cert/certs/infra-ca certificate=- policies="infra-ca" required_sans="infra-ca" required_extensions="1.3.6.1.4.1.58118.104.1:*" 

	vault token revoke "${KMS_ROOT_TOKEN}"
fi
exit 0
