#! /bin/sh

# This script implements a very quick and dirty offline CA
#
# The following volumes are used:
#
#   /app/db            Local state
#   /app/certs         Issued certificates
#   /app/keys          Public keys
#   /app/private       Private keys
#   /app/requests      Certificate requests

set -e

DB=/app/db
CERTS=/app/certs
PUBKEYS=/app/keys
PRIVKEYS=/app/private
REQUESTS=/app/requests

# Influential environment variables:

CA_NAME=${CA_NAME:-""}
CA_DN=${CA_DN:-""}
CA_TYPE=${CA_TYPE:-"root"}
CA_KEYTYPE=${CA_KEYTYPE:-"rsa"}
CA_RSA_BITS=${CA_RSA_BITS:-2048}
CA_EC_CURVE=${CA_EC_CURVE:-"prime256v1"}
CA_DIGEST=${CA_DIGEST:-"sha512"}
CA_SERIAL=${CA_SERIAL}

log()
{
	printf "%s: %s\n" "${CA_NAME}" "$*" >&2
}

if [ -z "${CA_NAME}" ] ; then
	printf "offline-ca: ERROR: CA_NAME must be set to use this image\n" >&2
	exit 100
fi

log "initialising the '${CA_NAME}' certificate authority"
#unset P11_KIT_SERVER_ADDRESS

if ! [ -z "${P11_KIT_SERVER_ADDRESS}" ] ; then
	log "Attempting to initialise PKCS#11 interface..."
	set +e
	PKCS11_URL="$(p11tool --list-token-urls --provider /usr/lib/$(uname -m)-linux-gnu/pkcs11/p11-kit-client.so)"
	if [ -z "$PKCS11_URL" ] ; then
		if [ -r "/run/p11-kit/pkcs11.url" ] ; then
			PKCS11_URL=$(cat /run/p11-kit/pkcs11.url)
		else
			log "ERROR: PKCS11_URL is unset and /run/p11-kit/pkcs11.url does not exist"
			exit 10
		fi
	fi
	if [ -z "$GNUTLS_PIN" ] ; then
		log "ERROR: GNUTLS_PIN is not set"
		exit 11
	fi
	set -e
	log "using PKCS#11 token '${PKCS11_URL}'"
fi

if ! [ -f ${DB}/openssl.cnf ] ; then
	log "generating /app/db/openssl.cnf does not exist, generating..."
	cat >${DB}/openssl.cnf <<EOF
[default]
default_md=${CA_DIGEST}
string_mask=utf8only

[req]
prompt=no
utf8=yes
distinguished_name=ca_dn
x509_extensions=ca_extensions

[ca_dn]
CN=${CA_NAME}

[ca_extensions]
basicConstraints=critical,CA:true
keyUsage=critical,keyCertSign,cRLSign
subjectKeyIdentifier=hash
#extendedKeyUsage=OCSPSigning
#authorityKeyIdentifier=keyid:always,issuer:always
#subjectAltName=DNS:root-ca
#authorityInfoAccess=OSCP;...
#authorityInfoAccess=caIssuers;...
#crlDistributionPoints=URI:
#certificatePolicies=...

[default_extensions]
basicConstraints=critical,CA:false
keyUsage=critical,digitalSignature
subjectKeyIdentifier=hash
#extendedKeyUsage=OCSPSigning
#authorityKeyIdentifier=keyid:always,issuer:always
#subjectAltName=DNS:root-ca
#authorityInfoAccess=OSCP;...
#authorityInfoAccess=caIssuers;...
#crlDistributionPoints=URI:
#certificatePolicies=...
EOF
fi

if [ -z "${CA_SERIAL}" ] ; then
	if ! [ -f ${DB}/ca.serial ] ; then
		openssl rand -out ${DB}/ca.serial -hex 16
	fi
	CA_SERIAL=$(cat ${DB}/ca.serial)
fi

if ! [ -z "$PKCS11_URL" ] ; then
	KEYFORM="engine"
	log "checking for private keys"
	set +e
	PRIVKEY_URL="$(p11tool --list-all-privkeys --login --only-urls "${PKCS11_URL}" | grep "object=${CA_NAME};")"
	if [ -z "${PRIVKEY_URL}" ] ; then
		log "NOTICE: no private key found for CA"
		case "$CA_KEYTYPE" in
			rsa)
				log "generating a ${CA_RSA_BITS} bit RSA keypair via PKCS#11..."
				p11tool --generate-privkey=rsa --mark-private --bits=${CA_RSA_BITS} --outfile=${PUBKEYS}/${CA_NAME}.pub.pem "${PKCS11_URL}" --login --label "${CA_NAME}"
				;;
			ec)
				log "generating a ${CA_EC_CURVE} elliptic curve keypair via PKCS#11..."
				p11tool --generate-privkey=ecc --mark-private --outfile=${PUBKEYS}/${CA_NAME}.pub.pem "${PKCS11_URL}" --login --label "${CA_NAME}"
				;;
			*)
				log "ERROR: unsupported CA_KEYTYPE '${CA_KEYTYPE}' (expected 'rsa' or 'ec')"
				exit 110
				;;
		esac
		PRIVKEY_URL="$(p11tool --list-all-privkeys --login "${PKCS11_URL}" | grep "URL: " | grep "=${CA_NAME};" | cut -c7- | head -1)"
		if [ -z "${PRIVKEY_URL}" ] ; then
			log "ERROR: unable to locate private key after generation"
			exit 112
		fi
	fi
	set -e
	log "using private key ${PRIVKEY_URL}"
else
	KEYFORM="pem"
	if ! [ -f ${PRIVKEYS}/${CA_NAME}.key.pem ] ; then
		case "$CA_KEYTYPE" in
			rsa)
				log "generating a ${CA_RSA_BITS} bit RSA keypair..."
				openssl genrsa -out ${PRIVKEYS}/${CA_NAME}.key.pem ${CA_RSA_BITS}
				;;
			ec)
				log "generating a ${CA_EC_CURVE} elliptic curve keypair..."
				openssl ecparam -genkey -name ${CA_EC_CURVE} -out ${PRIVKEYS}/${CA_NAME}.key.pem
				;;
			*)
				log "ERROR: unsupported CA_KEYTYPE '${CA_KEYTYPE}' (expected 'rsa' or 'ec')"
				exit 110
				;;
		esac
	fi
	log "using private key ${PRIVKEYS}/${CA_NAME}.key.pem"
fi

if [ ! -f ${PRIVKEYS}/${CA_NAME}.keyonly.pem ] && [ -f ${PRIVKEYS}/${CA_NAME}.key.pem ]; then
	case "$CA_KEYTYPE" in
		rsa)
			cp ${PRIVKEYS}/${CA_NAME}.key.pem ${PRIVKEYS}/${CA_NAME}.keyonly.pem
			;;
		ec)
			openssl ec -in ${PRIVKEYS}/${CA_NAME}.key.pem -out ${PRIVKEYS}/${CA_NAME}.keyonly.pem
			;;
	esac
fi

## XXX export pubkey for reference

## XXX check for expiry if the CA certificate is already present

privkey=${PRIVKEYS}/${CA_NAME}.key.pem
keyopts="-keyform ${KEYFORM}"
cakeyopts="-CAkeyform ${KEYFORM}"
engineopts="-engine pkcs11"
if ! [ -z "${PRIVKEY_URL}" ] ; then
	privkey="${PRIVKEY_URL};pin-value=${GNUTLS_PIN}"
fi

if ! [ -r ${CERTS}/${CA_NAME}.crt.pem ] ; then
	case "${CA_TYPE}" in
		root)
			log "generating self-signed root certificate"
			# Wrap the key in a self-signed certificate using the above configuration
			openssl req ${engineopts} -batch -config ${DB}/openssl.cnf -set_serial 0x${CA_SERIAL} -key "${privkey}" ${keyopts} -new -x509 -out ${CERTS}/${CA_NAME}.crt.pem
			;;
		sub)
			if ! [ -r ${REQUESTS}/${CA_NAME}.req.pem ] ; then
				log "generating certificate request for submission to parent CA"
				openssl req ${engineopts} -batch -config ${DB}/openssl.cnf -key "${privkey}" ${keyopts} -new -out ${REQUESTS}/${CA_NAME}.req.pem
			fi
			;;
		*)
			log "ERROR: unsupported CA_TYPE '${CA_TYPE}' (expected 'root' or 'sub')"
			exit 111
			;;
	esac
	if [ -r ${CERTS}/${CA_NAME}.crt.pem ] ; then
		cp ${CERTS}/${CA_NAME}.crt.pem ${DB}/ca.crt.pem
	fi
fi

if ! [ -r ${DB}/fingerprint ] && [ -r ${CERTS}/${CA_NAME}.crt.pem ] ; then
	openssl x509 -in ${CERTS}/${CA_NAME}.crt.pem -outform der | openssl sha256 -out ${DB}/fingerprint
fi

if ! [ -r ${CERTS}/${CA_NAME}.fullchain.pem ] && [ -r ${CERTS}/${CA_NAME}.crt.pem ] ; then
	cp ${CERTS}/${CA_NAME}.crt.pem ${CERTS}/${CA_NAME}.fullchain.pem
fi

if ! [ -r ${REQUESTS}/${CA_NAME}.req.pem ] && [ -r ${CERTS}/${CA_NAME}.crt.pem ] ; then
	# Generate a CSR from the certificate for cross-signing
	log "generating CSR for ${CA_NAME}"
	openssl x509 ${engineopts} -x509toreq -in ${CERTS}/${CA_NAME}.crt.pem -signkey "${privkey}" ${keyopts} -out ${REQUESTS}/${CA_NAME}.req.pem
fi

if [ -r "${CERTS}/${CA_NAME}.crt.pem" ] && ! [ -z "${PKCS11_URL}" ] ; then
	set +e
	CERT_URL="$(p11tool --list-all-certs --login --only-urls "${PKCS11_URL}" | grep "object=${CA_NAME};" | head -1)"
	if [ -z "${CERT_URL}" ] ; then
		log "installing certificate to HSM"
		p11tool --load-certificate ${CERTS}/${CA_NAME}.crt.pem --write --label=${CA_NAME} --login --mark-ca "${PKCS11_URL}"
		CERT_URL="$(p11tool --list-all-certs --login --only-urls "${PKCS11_URL}" | grep "object=${CA_NAME};" | head -1)"
		if [ -z "${CERT_URL}" ] ; then
			log "ERROR: unable to locate public certificate after writing to security module"
			exit 113
		fi
	fi
	set -e
	log "CA certificate is '${CERT_URL}'"
fi

## We have both a CA certificate and a private key, we can perform requests

if [ -z "$1" ] ; then
	log "initialisation completed successfully"
	exit 0
fi

ca_sign() {
	if [ -z "$1" ] ; then
		log "ERROR: no request specified to sign"
		exit 101
	fi
	if ! [ -r "${REQUESTS}/$1.req.pem" ] ; then
		log "ERROR: $1.req.pem does not exist"
		exit 50
	fi
	profile="default"
	if ! [ -z "$2" ] ; then
		profile="$2"
	fi
	log "signing '$1' with ${CA_NAME} using profile '${profile}'"
	if [ -r "${DB}/$2.serial" ] ; then
		serial=$( cat ${DB}/$2.serial )
		log "configured serial number for '$1' is '${serial}'"
	else
		serial=$( openssl rand -hex 16 )
		log "generated serial number for '$1' is '${serial}'"
	fi
	openssl x509 ${engineopts} \
		-sha512 \
		-req \
		-extfile ${DB}/openssl.cnf \
		-extensions ${profile}_extensions \
		-set_serial 0x${serial} \
		-CA ${CERTS}/${CA_NAME}.crt.pem \
		-CAkey "${privkey}" ${cakeyopts} \
		-in ${REQUESTS}/$1.req.pem \
		-out ${CERTS}/$1.${CA_NAME}.crt.pem
	cat ${CERTS}/$1.${CA_NAME}.crt.pem ${CERTS}/${CA_NAME}.fullchain.pem > ${CERTS}/$1.${CA_NAME}.fullchain.pem
	log "successfully signed $1 with ${CA_NAME}"
	return 0
}

case "$1" in
	sign|issue)
		shift
		ca_sign "$@"
		;;
	sign-store)
		shift
		if [ -z "${VAULT_ADDR}" ] ; then
			log "ERROR: VAULT_ADDR is not set, cannot store certificates"
			exit 150
		fi
		ca_sign "$@"
		log "writing root and intermediate certificates to KMS"
		cat ${CERTS}/root-a1.crt.pem | vault kv put -mount secret "$1/root_ca_crt" pem=-
		cat ${CERTS}/$1.${CA_NAME}.crt.pem ${CERTS}/${CA_NAME}.fullchain.pem | vault kv put -mount secret "$1/intermediate_ca_crt" pem=-
		;;
	*)
		log "unsupported command '$1' (expected 'sign' or 'sign-store')"
		exit 101
		;;
esac

